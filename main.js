(()=>{"use strict";var e={name:".profile__user",about:".profile__user-job",avatar:".profile__avatar",avatarWrapper:".profile__img-wrapper"},t=".pop-up__form",n=".pop-up__button-save",r="pop-up_active",o=".cards",i=".card__button-delete",a=".card__button-like",u="card__button-like_active",c={formSelector:".pop-up__form",inputSelector:".pop-up__input",submitButtonSelector:".pop-up__button",inactiveButtonClass:"pop-up__button_inactive",inputErrorClass:"pop-up__input_type_error",errorClass:"pop-up__error_visible"};function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))},(n="_checkResponseError")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this.url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getUserInfoApi",value:function(){return fetch("".concat(this.url,"/users/me"),{method:"GET",headers:this._headers}).then(this._checkResponseError)}},{key:"getInitialCards",value:function(){return fetch("".concat(this.url,"/cards"),{method:"GET",headers:this._headers}).then(this._checkResponseError)}},{key:"setUserInfoApi",value:function(e){return fetch("".concat(this.url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e["name-input"],about:e["job-input"]})}).then(this._checkResponseError)}},{key:"setUserAvatarApi",value:function(e){return fetch("".concat(this.url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e["url-avatar-input"]})}).then(this._checkResponseError)}},{key:"addCard",value:function(e){return fetch("".concat(this.url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponseError)}},{key:"deleteCard",value:function(e){return fetch("".concat(this.url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponseError)}},{key:"likesCard",value:function(e){return fetch("".concat(this.url,"/cards/").concat(e,"/likes"),{method:"PUT",headers:this._headers}).then(this._checkResponseError)}},{key:"dislikesCard",value:function(e){return fetch("".concat(this.url,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then(this._checkResponseError)}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return t&&p(e.prototype,t),n&&p(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _=f((function e(t,n,r,o,c,s){var l=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,"_getTemplate",(function(){return document.querySelector(l._selectorTemplate).content.querySelector(".card").cloneNode(!0)})),d(this,"generateCard",(function(){return l._element=l._getTemplate(),l._buttonLikeCard=l._element.querySelector(a),l._counterLike=l._element.querySelector(".card__like-counter"),l._imgCard=l._element.querySelector(".card__image"),l._element.querySelector(".card__title").textContent=l._title,l._imgCard.alt=l._title,l._imgCard.src=l._src,l._buttonLikeCard=l._element.querySelector(a),l._setEventListeners(),l._likes&&(l._counterLike.textContent=l._likes.length,l._likes.forEach((function(e){if(e._id===l._userId)return l._buttonLikeCard.classList.add(u)}))),l._idOwner!==l._userId&&l._element.querySelector(i).classList.add("card__button-delete_inactive"),l._element})),d(this,"_setEventListeners",(function(){l._element.querySelector(i).addEventListener("click",(function(){return l._handleCardDelete(l._element,l._idCard)})),l._buttonLikeCard.addEventListener("click",(function(){return l._handleLike()})),l._imgCard.addEventListener("click",(function(){return l._handleCardClick(l._item)}))})),d(this,"_handleLike",(function(){l._buttonLikeCard.classList.contains(u)?l._dataApi.dislikesCard(l._idCard).then((function(e){l._buttonLikeCard.classList.remove(u),l._counterLike.textContent=e.likes.length})).catch((function(e){console.log(e)})):l._dataApi.likesCard(l._idCard).then((function(e){l._buttonLikeCard.classList.add(u),l._counterLike.textContent=e.likes.length})).catch((function(e){console.log(e)}))})),this._item=t,this._title=this._item.name,this._alt=this._item.name,this._src=this._item.link,this._idOwner=this._item.idOwner,this._idCard=this._item.idCard,this._likes=this._item.likes,this._selectorTemplate=n,this._handleCardClick=r,this._handleCardDelete=o,this._userId=s,this._dataApi=c}));function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),y(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),y(this,"_handleClickIconClose",(function(e){(e.target.classList.contains("pop-up")||e.target.classList.contains("pop-up__close-icon"))&&n.close()})),this._popup=document.querySelector("".concat(t)),this._closeIcon=this._popup.querySelector(".pop-up__close-icon")}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add(r),document.addEventListener("keyup",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove(r),document.removeEventListener("keyup",this._handleEscClose)}},{key:"setEventListeners",value:function(){this._popup.addEventListener("click",this._handleClickIconClose)}}])&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=E(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function E(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=C(e)););return e}function k(e,t){return k=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},k(e,t)}function w(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&k(e,t)}(c,e);var r,o,i,a,u=(i=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(i);if(a){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return w(this,e)});function c(e,r){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(o=u.call(this,e)).submitHandler=r,o.form=o._popup.querySelector(t),o._inputList=o._popup.querySelectorAll(".pop-up__input"),o._inputName=o._popup.querySelector(".pop-up__input_user-name"),o._inputUserInfo=o._popup.querySelector(".pop-up__input_user-job"),o._popUpButtonSave=o._popup.querySelector(n),o._popUpButtonTextContent=o._popUpButtonSave.textContent,o}return r=c,(o=[{key:"close",value:function(){this.form.reset(),g(C(c.prototype),"close",this).call(this)}},{key:"getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setInputValues",value:function(e){this._inputList.forEach((function(t){t.value=e[t.name]}))}},{key:"renderLoading",value:function(e){this._popUpButtonSave.textContent=e?"Сохранение...":this._popUpButtonTextContent}},{key:"setEventListeners",value:function(){var e=this;g(C(c.prototype),"setEventListeners",this).call(this),this.form.addEventListener("submit",(function(t){t.preventDefault(),e.submitHandler(e.getInputValues())}))}}])&&v(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),c}(b);function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(){return j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=P(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},j.apply(this,arguments)}function P(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}function I(e,t){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},I(e,t)}function R(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupImage=t._popup.querySelector(".pop-up__view-img"),t._imageName=t._popup.querySelector(".pop-up__title-view-img"),t}return t=a,(n=[{key:"open",value:function(e,t){this._popupImage.src=e,this._popupImage.alt=t,this._imageName.textContent=t,j(q(a.prototype),"open",this).call(this)}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(b);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var B=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}},{key:"clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(){var e=this;this.clear(),this._renderedItems.forEach((function(t){e._renderer(t)}))}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function A(e,t,n){return t&&x(e.prototype,t),n&&x(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function V(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var D=A((function e(t){var n=this,r=t.selectorsUser;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),V(this,"getUserInfo",(function(){return{"name-input":n._userName.textContent,"job-input":n._userJob.textContent}})),V(this,"setUserInfo",(function(e){n._userName.textContent=e["name-input"]||e.name,n._userJob.textContent=e["job-input"]||e.about})),V(this,"setUserAvatar",(function(e){n._userAvatar.src=e.avatar||e["url-avatar-input"]})),this._selectorsUser=r,this._userName=document.querySelector(this._selectorsUser.name),this._userJob=document.querySelector(this._selectorsUser.about),this._userAvatar=document.querySelector(this._selectorsUser.avatar)}));function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function H(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var J=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),H(this,"_showInputError",(function(){r._inputElement.classList.add(r._selectors.inputErrorClass),r._errorElement.textContent=r._errorMessage,r._errorElement.classList.add(r._selectors.errorClass)})),H(this,"_hideInputError",(function(){r._inputElement.classList.remove(r._selectors.inputErrorClass),r._errorElement.classList.remove(r._selectors.errorClass),r._errorElement.textContent=""})),H(this,"_isValid",(function(){r._inputElement.validity.valid?r._hideInputError():r._showInputError()})),H(this,"_hasInvalidInput",(function(){return r._inputList.some((function(e){return!e.validity.valid}))})),H(this,"_enableSubmitButton",(function(){r._buttonElement.classList.add(r._selectors.inactiveButtonClass),r._buttonElement.setAttribute("disabled","disabled")})),H(this,"_disableSubmitButton",(function(){r._buttonElement.classList.remove(r._selectors.inactiveButtonClass),r._buttonElement.removeAttribute("disabled")})),H(this,"_toggleButtonState",(function(){r._hasInvalidInput()?r._enableSubmitButton():r._disableSubmitButton()})),H(this,"_setEventListeners",(function(){r._toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._inputElement=e,r._errorElement=r._formElement.querySelector(".".concat(r._inputElement.name,"-error")),r._errorMessage=r._inputElement.validationMessage,r._isValid(),r._toggleButtonState()}))}))})),H(this,"enableValidation",(function(){r._setEventListeners()})),this._formElement=t,this._selectors=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._selectors.inputSelector)),this._buttonElement=this._formElement.querySelector(n.submitButtonSelector)}var t,n;return t=e,(n=[{key:"resetValidation",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){e._inputElement=t,e._errorElement=e._formElement.querySelector(".".concat(e._inputElement.name,"-error")),e._hideInputError()}))}}])&&N(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function M(e){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},M(e)}function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function W(){return W="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=z(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},W.apply(this,arguments)}function z(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Q(e)););return e}function F(e,t){return F=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},F(e,t)}function K(e,t){if(t&&("object"===M(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Q(e){return Q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Q(e)}var X=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&F(e,t)}(c,e);var r,o,i,a,u=(i=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Q(i);if(a){var n=Q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return K(this,e)});function c(e,r){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(o=u.call(this,e)).form=o._popup.querySelector(t),o._popUpButtonSave=o._popup.querySelector(n),o._popUpButtonTextContent=o._popUpButtonSave.textContent,o.submitHandler=r,o}return r=c,(o=[{key:"renderLoading",value:function(e){this._popUpButtonSave.textContent=e?"Сохранение...":this._popUpButtonTextContent}},{key:"setEventListeners",value:function(){var e=this;W(Q(c.prototype),"setEventListeners",this).call(this),this.form.addEventListener("submit",(function(t){t.preventDefault(),e.submitHandler()}))}}])&&G(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),c}(b),Y=document.querySelector(e.avatarWrapper),Z=document.querySelector(".profile__button_edit"),$=document.querySelector(".profile__button_add"),ee=document.querySelector(".pop-up__form-edit-profile"),te=document.querySelector(".pop-up__form-add-card"),ne=document.querySelector(".pop-up__form-edit-avatar"),re=new J(ee,c);re.enableValidation();var oe=new J(te,c);oe.enableValidation();var ie=new J(ne,c);ie.enableValidation();var ae=new D({selectorsUser:e}),ue=null,ce=new l({url:"https://mesto.nomoreparties.co/v1/cohort-51",headers:{authorization:"d4c4166d-7da1-41e5-9c12-6ada905232af","Content-Type":"application/json"}});function se(e){return new _(e,"#template-card",he,pe,ce,ue).generateCard()}ce.getUserInfoApi().then((function(e){ae.setUserInfo(e),ae.setUserAvatar(e),ue=e._id})).catch((function(e){console.log(e)}));var le={};function pe(e,t){return fe.open(),fe.setEventListeners(),le.element=e,le.idCardDelete=t,le}var fe=new X(".pop-up_delete-card",(function(){fe.renderLoading(!0),ce.deleteCard(le.idCardDelete).finally((function(){return fe.renderLoading(!1)})).catch((function(e){console.log(e)})),fe.close(),le.element.remove()})),de=new B({items:se,renderer:function(e){return se(e)}},o),_e=new O(".pop-up_add-card",(function(e){_e.renderLoading(!0);var t={name:e["name-card-input"],link:e["url-input"]},n=se(t);ce.addCard(t).finally((function(){return _e.renderLoading(!1)})),_e.close(),de.prependItem(n)}));function he(e){ye.open(e.link,e.name)}_e.setEventListeners(),$.addEventListener("click",(function(){_e.open(),oe.resetValidation()}));var ye=new T(".pop-up_view-card");ye.setEventListeners();var be=new O(".pop-up_edit-profile",(function(e){be.renderLoading(!0),ce.setUserInfoApi(e).finally((function(){return be.renderLoading(!1)})),ae.setUserInfo(e),be.close()}));be.setEventListeners(),Z.addEventListener("click",(function(){be.open();var e=ae.getUserInfo();be.setInputValues(e),re.resetValidation()}));var me=new O(".pop-up_edit-avatar",(function(e){me.renderLoading(!0),ce.setUserAvatarApi(e).finally((function(){return fe.renderLoading(!1)})).catch((function(e){console.log(e)})),ae.setUserAvatar(e),me.close()}));Y.addEventListener("click",(function(){me.open(),ie.resetValidation()})),me.setEventListeners(),ce.getInitialCards().then((function(e){var t=new B({items:e,renderer:function(e){var n=se({name:e.name,link:e.link,idOwner:e.owner._id,idCard:e._id,likes:e.likes});t.addItem(n)}},o);t.renderItems(e)})).catch((function(e){console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,